// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xAkLkAqvP6asFmH1nLJuEt
// Component: _621kYhPBmCX
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xAkLkAqvP6asFmH1nLJuEt/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: _621kYhPBmCX/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: xAfiXzuhe1V8/icon
import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "titleInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    queryMusic: usePlasmicDataOp(() => {
      return {
        sourceId: "jryHJPp666ieaXc9gFJV37",
        opId: "26cc5e4d-dba5-4b52-9a1a-e35a83ed19b9",
        userArgs: {},
        cacheKey: `plasmic.$.26cc5e4d-dba5-4b52-9a1a-e35a83ed19b9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "h28CJeGozN4wwGzv6hpK1L",
        opId: "fa4e27ce-1046-4de4-9295-3be0c97c0a7e",
        userArgs: {
          path: [$queries.queryMusic.data[1].artwork]
        },
        cacheKey: `plasmic.$.fa4e27ce-1046-4de4-9295-3be0c97c0a7e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.queryMusic.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"repeaterGroup"}
                data-plasmic-override={overrides.repeaterGroup}
                className={classNames(projectcss.all, sty.repeaterGroup)}
                key={currentIndex}
              >
                <div
                  data-plasmic-name={"repeaterRow"}
                  data-plasmic-override={overrides.repeaterRow}
                  className={classNames(projectcss.all, sty.repeaterRow)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"repeaterItemImage"}
                    data-plasmic-override={overrides.repeaterItemImage}
                    alt={""}
                    className={classNames(sty.repeaterItemImage)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"100"}
                    loading={"lazy"}
                    src={undefined}
                    width={"100"}
                  />

                  <div
                    data-plasmic-name={"repeaterItemTitle"}
                    data-plasmic-override={overrides.repeaterItemTitle}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.repeaterItemTitle
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `supabase.createSignedUrl('private', \`musicartworks/${currentItem.artwork}\`, 60)`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"repeaterItemTitle2"}
                    data-plasmic-override={overrides.repeaterItemTitle2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.repeaterItemTitle2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon2Icon
                    data-plasmic-name={"repeaterItemDeleteBtn"}
                    data-plasmic-override={overrides.repeaterItemDeleteBtn}
                    className={classNames(
                      projectcss.all,
                      sty.repeaterItemDeleteBtn
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["postgresDeleteMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "jryHJPp666ieaXc9gFJV37",
                                opId: "170c4775-778d-46c8-863d-1423f70b1a63",
                                userArgs: {
                                  conditions: [currentItem.id]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresDeleteMany"] != null &&
                        typeof $steps["postgresDeleteMany"] === "object" &&
                        typeof $steps["postgresDeleteMany"].then === "function"
                      ) {
                        $steps["postgresDeleteMany"] = await $steps[
                          "postgresDeleteMany"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
              </div>
            );
          })}
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.titleInput),
              onChange: generateStateOnChangePropForCodeComponents(
                $state,
                "value",
                ["titleInput", "value"],
                AntdInput_Helpers
              ),
              onPressEnter: async event => {
                const $steps = {};
                $steps["postgresCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "jryHJPp666ieaXc9gFJV37",
                          opId: "c283b208-8c3b-4ee1-a963-29c3a311ec8b",
                          userArgs: {
                            variables: [$state.titleInput.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresCreate"] != null &&
                  typeof $steps["postgresCreate"] === "object" &&
                  typeof $steps["postgresCreate"].then === "function"
                ) {
                  $steps["postgresCreate"] = await $steps["postgresCreate"];
                }
              },
              value: generateStateValueProp($state, ["titleInput", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "titleInput.value"
                }
              ],

              [],
              AntdInput_Helpers ?? {},
              child$Props
            );
            return (
              <AntdInput
                data-plasmic-name={"titleInput"}
                data-plasmic-override={overrides.titleInput}
                {...child$Props}
              />
            );
          })()}
          <UploadWrapper
            data-plasmic-name={"upload"}
            data-plasmic-override={overrides.upload}
            accept={""}
            className={classNames("__wab_instance", sty.upload)}
            files={generateStateValueProp($state, ["upload", "files"])}
            onFilesChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["upload", "files"]).apply(
                null,
                eventArgs
              );
              (async files => {
                const $steps = {};
                $steps["supabaseUploadFile"] = (currentUser.roleName = "admin")
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "h28CJeGozN4wwGzv6hpK1L",
                          opId: "44d9847c-b3b2-4852-9a81-0eee3426a45b",
                          userArgs: {
                            path: [$$.uuid.v4()],
                            content: [
                              $state.upload.files[
                                $state.upload.files.length - 1
                              ]?.contents
                            ],

                            contentType: ["image/jpg/png"]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        },
                        continueOnError: true
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["supabaseUploadFile"] != null &&
                  typeof $steps["supabaseUploadFile"] === "object" &&
                  typeof $steps["supabaseUploadFile"].then === "function"
                ) {
                  $steps["supabaseUploadFile"] = await $steps[
                    "supabaseUploadFile"
                  ];
                }
                $steps["postgresCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "jryHJPp666ieaXc9gFJV37",
                          opId: "347c1ee0-1e5c-4663-b168-0500b5dc547b",
                          userArgs: {
                            variables: [
                              $steps.supabaseUploadFile.path,
                              $state.titleInput.value
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresCreate"] != null &&
                  typeof $steps["postgresCreate"] === "object" &&
                  typeof $steps["postgresCreate"].then === "function"
                ) {
                  $steps["postgresCreate"] = await $steps["postgresCreate"];
                }
              }).apply(null, eventArgs);
            }}
            showUploadList={true}
          >
            <AntdButton
              data-plasmic-name={"uploadImageField"}
              data-plasmic-override={overrides.uploadImageField}
              className={classNames("__wab_instance", sty.uploadImageField)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hdplq
                )}
              >
                {"Upload"}
              </div>
            </AntdButton>
          </UploadWrapper>
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            onClick={async () => {
              const $steps = {};
              $steps["useIntegration"] = true
                ? (() => {
                    const actionArgs = {};
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["useIntegration"] != null &&
                typeof $steps["useIntegration"] === "object" &&
                typeof $steps["useIntegration"].then === "function"
              ) {
                $steps["useIntegration"] = await $steps["useIntegration"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2XUm
              )}
            >
              {"Button"}
            </div>
          </AntdButton>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "repeaterGroup",
    "repeaterRow",
    "repeaterItemImage",
    "repeaterItemTitle",
    "repeaterItemTitle2",
    "repeaterItemDeleteBtn",
    "titleInput",
    "upload",
    "uploadImageField",
    "button"
  ],

  repeaterGroup: [
    "repeaterGroup",
    "repeaterRow",
    "repeaterItemImage",
    "repeaterItemTitle",
    "repeaterItemTitle2",
    "repeaterItemDeleteBtn"
  ],

  repeaterRow: [
    "repeaterRow",
    "repeaterItemImage",
    "repeaterItemTitle",
    "repeaterItemTitle2",
    "repeaterItemDeleteBtn"
  ],

  repeaterItemImage: ["repeaterItemImage"],
  repeaterItemTitle: ["repeaterItemTitle"],
  repeaterItemTitle2: ["repeaterItemTitle2"],
  repeaterItemDeleteBtn: ["repeaterItemDeleteBtn"],
  titleInput: ["titleInput"],
  upload: ["upload", "uploadImageField"],
  uploadImageField: ["uploadImageField"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    repeaterGroup: makeNodeComponent("repeaterGroup"),
    repeaterRow: makeNodeComponent("repeaterRow"),
    repeaterItemImage: makeNodeComponent("repeaterItemImage"),
    repeaterItemTitle: makeNodeComponent("repeaterItemTitle"),
    repeaterItemTitle2: makeNodeComponent("repeaterItemTitle2"),
    repeaterItemDeleteBtn: makeNodeComponent("repeaterItemDeleteBtn"),
    titleInput: makeNodeComponent("titleInput"),
    upload: makeNodeComponent("upload"),
    uploadImageField: makeNodeComponent("uploadImageField"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
